import { app, BrowserWindow, screen, globalShortcut, ipcMain } from 'electron';
import { storage } from "./server/storage";
import { ipcApiKeys } from "./server/api";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
let isShowingMainWindow = false;
let mainWindow: BrowserWindow;

const storageData = storage.read();

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create a window that fills the screen's available work area.
  const allDisplays = screen.getAllDisplays();

  // TODO: retrive this display from saved settings
  const mainDisplay =
    storageData && storageData["main-display"]
      ? storageData["main-display"]
      : allDisplays[1];

  const { width, height, x, y } = mainDisplay.bounds;
  const displayData = { width, height, x, y };

  mainWindow = new BrowserWindow({
    ...displayData,
    transparent: true,
    titleBarStyle: "hidden",
    // titleBarOverlay: {
    //   color: "#2f3241",
    //   symbolColor: "#74b1be",
    //   height: 60,
    // },
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  mainWindow.setBounds({ ...displayData });
  // default is the window to be hidden
  // mainWindow.hide();
  mainWindow.show();

  // TODO: retrive global shortcuts from saved settings
  // Register a shortcut to toggle the window when the 'F2' key is pressed

  globalShortcut.register("F2", () => {
    if (!isShowingMainWindow) {
      mainWindow.show();
    } else {
      mainWindow.hide();
    }

    isShowingMainWindow = !isShowingMainWindow;
  });

  // Hide the window when it loses focus
  // mainWindow.on("blur", () => {
  //   mainWindow.hide();
  // });

  // Register a shortcut to hide the window when the escape key is pressed
  // globalShortcut.register("Escape", () => {
  //   mainWindow.hide();
  // });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  mainWindow.setAlwaysOnTop(true);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  storage.write({ ...storageData, "main-display": mainDisplay });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// Listen for messages from the renderer process
ipcMain.on(ipcApiKeys.setTitle, (event, message) => {
  if (mainWindow) {
    mainWindow.setTitle(message);
  }
});

ipcMain.on(ipcApiKeys.createWidget, (event, message) => {
  // console.log(event, message);
  storageData['widgets'].push(message);
  storage.write(storageData);
});

ipcMain.on(ipcApiKeys.updateWidget, (event, message) => {
  // console.log(event, message);
  storageData['widgets'] = storageData['widgets'].map((widget:any)=>{
    if(widget.id===message.id){
      widget = {...widget,...message}
    }
    return widget;
  }) 
  storage.write(storageData);
});

ipcMain.on(ipcApiKeys.deleteWidget, (event, message) => {
  // console.log(event, message);
  storageData['widgets'] = storageData['widgets'].filter((widget:any)=>widget.id!==message.id);
  storage.write(storageData);
});

ipcMain.on(ipcApiKeys.getWidgetList, (event, message) => {
  console.log(storageData['widgets']);
  // storageData['widgets'] = [{id:9999,data:'lol'}];
  event.reply(ipcApiKeys.getWidgetList, storageData['widgets'])
});
